package ripio.lootballs.datagen;

import com.cobblemon.mod.common.CobblemonItems;
import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.SimpleFabricLootTableProvider;
import net.minecraft.item.Items;
import net.minecraft.loot.LootPool;
import net.minecraft.loot.LootTable;
import net.minecraft.loot.context.LootContextTypes;
import net.minecraft.loot.entry.ItemEntry;
import net.minecraft.loot.function.SetCountLootFunction;
import net.minecraft.loot.provider.number.ConstantLootNumberProvider;
import net.minecraft.loot.provider.number.UniformLootNumberProvider;
import net.minecraft.util.Identifier;
import ripio.lootballs.LootBalls;

import java.util.function.BiConsumer;

public class LootBallsLootTableProvider extends SimpleFabricLootTableProvider {
    public static final Identifier AZURE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "azure_loot_table");
    public static final Identifier CITRINE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "citrine_loot_table");
    public static final Identifier DIVE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "dive_loot_table");
    public static final Identifier GREAT_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "great_loot_table");
    public static final Identifier HEAL_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "heal_loot_table");
    public static final Identifier LURE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "lure_loot_table");
    public static final Identifier LUXURY_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "luxury_loot_table");
    public static final Identifier MASTER_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "master_loot_table");
    public static final Identifier POKE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "poke_loot_table");
    public static final Identifier PREMIER_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "premier_loot_table");
    public static final Identifier REPEAT_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "repeat_loot_table");
    public static final Identifier ROSEATE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "roseate_loot_table");
    public static final Identifier SAFARI_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "safari_loot_table");
    public static final Identifier SLATE_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "slate_loot_table");
    public static final Identifier ULTRA_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "ultra_loot_table");
    public static final Identifier VERDANT_LOOT_TABLE = new Identifier(LootBalls.MOD_ID, "verdant_loot_table");


    public LootBallsLootTableProvider(FabricDataOutput dataGenerator) {
        super(dataGenerator, LootContextTypes.CHEST);
    }

    @Override
    public void accept(BiConsumer<Identifier, LootTable.Builder> biConsumer) {
        biConsumer.accept(AZURE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.AZURE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(CITRINE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.CITRINE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(DIVE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.DIVE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.WATER_STONE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MYSTIC_WATER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(Items.COAST_ARMOR_TRIM_SMITHING_TEMPLATE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(Items.TIDE_ARMOR_TRIM_SMITHING_TEMPLATE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.X_SP_ATK)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POWER_LENS)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(4)
                        )
                )
        );
        biConsumer.accept(GREAT_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.GREAT_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.SUPER_POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MAX_ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ELIXIR)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_APPLE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MAX_REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(16F,24F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_S)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                )
        );
        biConsumer.accept(HEAL_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.HEAL_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.PARALYZE_HEAL)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.AWAKENING)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ANTIDOTE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ICE_HEAL)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.BURN_HEAL)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.FULL_HEAL)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MAX_REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.FULL_RESTORE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(LURE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.LURE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ICE_STONE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.NEVER_MELT_ICE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.DEEP_SEA_SCALE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.DEEP_SEA_TOOTH)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POWER_ANKLET)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.DRAGON_SCALE)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_M)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(LUXURY_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.LUXURY_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.SHINY_STONE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(Items.AMETHYST_SHARD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(32F,48F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(Items.COPPER_INGOT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(32F,48F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.LAPIS_LAZULI)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(32F,48F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(Items.IRON_INGOT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(16F,32F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.GOLD_INGOT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(16F,32F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(Items.DIAMOND)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(8F,16F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(Items.NETHERITE_SCRAP)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(MASTER_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(Items.ENCHANTED_GOLDEN_APPLE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(8F,16F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(Items.NETHERITE_SCRAP)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(Items.NETHER_STAR)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_S)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(10F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_M)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(6F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_L)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(3F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MASTER_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(POKE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.POKE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(PREMIER_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.PREMIER_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(REPEAT_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.REPEAT_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.SOFT_SAND)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LIGHT_CLAY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(Items.DUNE_ARMOR_TRIM_SMITHING_TEMPLATE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.DIAMOND)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,16F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POWER_BAND)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(CobblemonItems.DRAGON_FANG)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(Items.WITHER_SKELETON_SKULL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(ROSEATE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.ROSEATE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(5F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(SAFARI_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.SAFARI_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.SUN_STONE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.SILK_SCARF)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RAZZ_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(6F,16F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.NANAB_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(6F,16F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.PINAP_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(6F,16F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LUCKY_EGG)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.EXPERIENCE_CANDY_XS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(3F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(SLATE_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.SLATE_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );
        biConsumer.accept(ULTRA_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.ULTRA_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.HYPER_POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(3F,6F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MAX_ELIXIR)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.MAX_POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.FULL_RESTORE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,2F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.CHOICE_BAND)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.CHOICE_SCARF)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.CHOICE_SPECS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(3F)))
                                .weight(2)
                        )
                )
        );
        biConsumer.accept(VERDANT_LOOT_TABLE, LootTable.builder()
                .pool(LootPool.builder().rolls(ConstantLootNumberProvider.create(1.0F))
                        .with(ItemEntry.builder(CobblemonItems.VERDANT_BALL)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(9)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ORAN_BERRY)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(8)
                        )
                        .with(ItemEntry.builder(CobblemonItems.POTION)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(7)
                        )
                        .with(ItemEntry.builder(CobblemonItems.ETHER)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1F,3F)))
                                .weight(6)
                        )
                        .with(ItemEntry.builder(Items.GOLDEN_CARROT)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(4F,8F)))
                                .weight(5)
                        )
                        .with(ItemEntry.builder(CobblemonItems.REVIVE)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(2F,4F)))
                                .weight(4)
                        )
                        .with(ItemEntry.builder(Items.EMERALD)
                                .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(10F,16F)))
                                .weight(3)
                        )
                        .with(ItemEntry.builder(CobblemonItems.LEFTOVERS)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(2)
                        )
                        .with(ItemEntry.builder(CobblemonItems.RARE_CANDY)
                                .apply(SetCountLootFunction.builder(ConstantLootNumberProvider.create(1F)))
                                .weight(1)
                        )
                )
        );

    }

}
